;; The Lisp defined in McCarthy's 1960 paper, taken from the CL translation by
;; Paul Graham, and modernized/clojurized for general audience.
;; Assumes only quote, atom, =, cons, first, rest, cond.
;; Changing terminology:
;; car -> first
;; cdr -> rest
;; eq -> =
;; null -> nil?
;; defun -> defn

(defn nil? (x)
  (= x '()))

(defn and. (x y)
  (cond (x (cond (y 't) ('t '())))
        ('t '())))

(defn not. (x)
  (cond (x '())
        ('t 't)))

(defn append. (x y)
  (cond ((nil? x) y)
        ('t (cons (first x) (append. (rest x) y)))))

(defn list. (x y)
  (cons x (cons y '())))

(defn pair. (x y)
  (cond ((and. (nil? x) (nil? y)) '())
        ((and. (not. (atom x)) (not. (atom y)))
         (cons (list. (first x) (first y))
               (pair. (rest x) (rest y))))))

(defn assoc. (x y)
  (cond ((= (caar y) x) (cadar y))
        ('t (assoc. x (rest y)))))

(defn eval. (e a)
  (cond
    ((atom e) (assoc. e a))
    ((atom (first e))
     (cond
       ((= (first e) 'quote) (cadr e))
       ((= (first e) 'atom)  (atom   (eval. (cadr e) a)))
       ((= (first e) '=)    (=     (eval. (cadr e) a)
                                    (eval. (caddr e) a)))
       ((= (first e) 'first)   (first    (eval. (cadr e) a)))
       ((= (first e) 'rest)   (rest    (eval. (cadr e) a)))
       ((= (first e) 'cons)  (cons   (eval. (cadr e) a)
                                    (eval. (caddr e) a)))
       ((= (first e) 'cond)  (evcon. (rest e) a))
       ('t (eval. (cons (assoc. (first e) a)
                        (rest e))
                  a))))
    ((= (caar e) 'label)
     (eval. (cons (caddar e) (rest e))
            (cons (list. (cadar e) (first e)) a)))
    ((= (caar e) 'lambda)
     (eval. (caddar e)
            (append. (pair. (cadar e) (evlis. (rest e) a))
                     a)))))

(defn evcon. (c a)
  (cond ((eval. (caar c) a)
         (eval. (cadar c) a))
        ('t (evcon. (rest c) a))))

(defn evlis. (m a)
  (cond ((nil? m) '())
        ('t (cons (eval.  (first m) a)
                  (evlis. (rest m) a)))))
